##
## PIN tools
##

LIBRDA = rda_stacks/librda.a
RDA_HEADERS = rda_stacks/src

##############################################################
#
# Here are some things you might want to configure
#
##############################################################

TARGET_COMPILER?=gnu
ifdef OS
    ifeq (${OS},Windows_NT)
        TARGET_COMPILER=ms
    endif
endif

##############################################################
#
# include *.config files
#
##############################################################

ifeq ($(TARGET_COMPILER),gnu)
    include ../makefile.gnu.config
    OPT ?= -O2 -fomit-frame-pointer
    DBG ?= -g
    CXXFLAGS = -I$(PIN_HOME)/InstLib -Wall -Werror -Wno-unknown-pragmas
    CXXFLAGS += -I$(RDA_HEADERS) $(DBG) $(OPT) -MMD
    #CXXFLAGS += -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS #-fno-default-inline -fkeep-inline-functions
#    ifeq ($(CXX), icc)
    ifeq "$(wildcard /usr/include/boost )" ""
        CXXFLAGS += -I../extra-include
    endif
    SEQ ?= "no"
    ifeq ($(SEQ), yes)
	    CXXFLAGS += -DSEQUENTIAL
    endif
    #PIN_LIBS += -lrt
endif

ifeq ($(TARGET_COMPILER),ms)
    include ../makefile.ms.config
#    DBG?=
endif

 
TOOL_ROOTS = reusedistance sampledreuse_parallel #reusedistance2stacks sampledreuse_perref

TOOLS = $(TOOL_ROOTS:%=$(OBJDIR)%$(PINTOOL_SUFFIX))

all: tools
tools: $(OBJDIR) $(TOOLS) $(OBJDIR)librarymap.o
test: $(OBJDIR) reusedistance.test

$(TOOLS): $(LIBRDA)

.PHONY: $(LIBRDA)
$(LIBRDA):
	$(MAKE) SEQ=$(SEQ) -C rda_stacks librda.a

libcsmfuncs: csmfuncs.c
	gcc-4.3 -fpic -g -c -Wall csmfuncs.c
	gcc-4.3 -shared -Wl,-soname,libcsmfuncs.so -o libcsmfuncs.so csmfuncs.o
	ar rcs libcsmfuncs.a csmfuncs.o

libperfctr: perfctr.c
	gcc -Wall -g -fPIC -shared -Wl,-soname,libperfctr.so -o libperfctr.so perfctr.c -lpfm -lpthread
	gcc -Wall -g -c perfctr.c
	ar rcs libperfctr.a perfctr.o

libperfsample: perfctr_sample.cc perf_util.c perf_util.h
	#gcc -Wall -g -fPIC -shared -Wl,-soname,libperfsample.so -D_GNU_SOURCE -o libperfsample.so perfctr_sample.c perf_util.c -lpfm -lpthread
	gcc -Wall -g -D_GNU_SOURCE  -c perfctr_sample.c
	gcc -Wall -g -D_GNU_SOURCE  -c perf_util.c
	ar rcs libperfsample.a perfctr_sample.o perf_util.o

libperfctr_op: perfctr_op.c
	gcc -Wall -g -fPIC -shared -Wl,-soname,libperfctr_op.so -o libperfctr_op.so perfctr_op.c -lpfm -lpthread
	gcc -Wall -g -c perfctr_op.c
	ar rcs libperfctr_op.a perfctr_op.o
	
perftest: perf-test.c libperfctr
	gcc -Wall -g -o perftest perf-test.c perfctr.c -lpfm 

rd1: tools
	mv $(OBJDIR)reusedistance.so $(OBJDIR)reusedistance1.so
rd2: tools
	mv $(OBJDIR)reusedistance.so $(OBJDIR)reusedistance2.so
rd3: tools
	mv $(OBJDIR)reusedistance.so $(OBJDIR)reusedistance3.so
rd4: tools
	mv $(OBJDIR)reusedistance.so $(OBJDIR)reusedistance4.so


# the real version.h is generated by the synccode script so git doesn't have
# to be installed on all the machines. this is a fallback if it doesn't exist
VERSION = "unknown"
version.h:
	echo "#define PINRD_GIT_VERSION \"$(VERSION)\"" > version.h

prefetch: prefetch_disable.c
	gcc -Wall -g -o prefetch prefetch_disable.c


## build rules

$(OBJDIR):
	mkdir -p $(OBJDIR)


$(OBJDIR)%.o : %.cc version.h
	$(CXX) -c $(CXXFLAGS) $(PIN_CXXFLAGS) ${OUTOPT}$@ $<

$(TOOLS): $(PIN_LIBNAMES)
$(TOOLS): %$(PINTOOL_SUFFIX) : %.o $(OBJDIR)librarymap.o
	$(PIN_LD) $(PIN_LDFLAGS) ${LINK_OUT}$@ $< $(LIBRDA) $(PIN_LIBS) $(OBJDIR)librarymap.o $(DBG)

## cleaning
clean:
	-rm -rf $(OBJDIR) *.out *.tested *.failed $(LIBRDA)
	$(MAKE) -C rda_stacks clean

-include *.d

