
BUILD = build
SRC = src
OPT ?= -O3 -fomit-frame-pointer -fno-stack-protector
SEQ ?= "no"
BOOSTINC=
ifeq "$(wildcard /usr/include/boost )" ""
  BOOSTINC=-I../../extra-include
endif
CC_OPTS=-g $(OPT) -Wall -fPIC $(BOOSTINC) #-fdump-class-hierarchy #-fno-default-inline -fkeep-inline-functions
ifeq ($(SEQ), yes)
  CC_OPTS += -DSEQUENTIAL
endif

OBJS = reusestack.o treereusestack.o approximatereusestack.o stackholder.o\
sampledreusestack.o reusestackstats.o sharedsampledreusestack.o parallelsampledstack.o rda-sync.o\
prefetcher.o strideprefetcher.o globalstreamprefetcher.o
TESTS = reusestack_test.o reusestackstats_test.o sync_test.o parallelsampledstack_test.o\
sampledreusestack_test.o prefetcher_test.o strideprefetcher_test.o prefetcharbiter_test.o globalstreamprefetcher_test.o
#stackholder_test.o
BOBJS = $(OBJS:%=$(BUILD)/%)
BTESTS = $(TESTS:%=$(BUILD)/%)

all: librda

unittests: CC_OPTS += -DUNITTEST
unittests: $(BTESTS) $(BOBJS)
	$(CXX) $(CC_OPTS) -o unittests $(BTESTS) $(BOBJS) -lgtest -lgtest_main -lpthread

parallel_tests: $(BOBJS) src/test_parallel.cc
	$(CXX) $(CC_OPTS) -o parallel_tests $(BOBJS) src/test_parallel.cc -lgtest -lgtest_main -lpthread

librda: librda.a librda.so

test: unittests
	./unittests

librda.a : $(BOBJS)
	ar rcs librda.a $(BOBJS)

#librda.a: CC_OPTS += -fPIC
#librda.so: CC_OPTS += -fPIC
librda.so:  $(BOBJS)
	gcc -shared -Wl,-soname,librda.so -o librda.so $(BOBJS)

$(BUILD)/%_test.o: $(SRC)/%_test.cc #$(BUILD)
	$(CXX) -c $(CC_OPTS) $< -o $@

$(BUILD)/stackholder.o: $(SRC)/version.h
$(BUILD)/sampledreusestack.o: $(SRC)/version.h
$(BIULD)/parallelsampledstack.o: $(SRC)/rda-sync.h $(SRC)/threadqueue.h

$(BUILD)/%.o: $(SRC)/%.cc  $(SRC)/%.h $(SRC)/reusestack-common.h #$(BUILD)
	$(CXX) -c $(CC_OPTS) $< -o $@

# the dependence on this target above is commented out because it seems to always force rebuilds
$(BUILD): 
	mkdir -p $(BUILD)

# the real version.h is generated by the synccode script so git doesn't have
# to be installed on all the machines. this is a fallback if it doesn't exist
VERSION = "unknown"
$(SRC)/version.h:
	echo "#define LIBRDA_GIT_VERSION \"$(VERSION)\"" > $(SRC)/version.h

.PHONY: clean objclean
objclean:
	rm -f $(BOBJS)
clean: objclean
	rm -f $(BTESTS) librda.a librda.so unittests
